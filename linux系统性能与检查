linux 性能检查总结

iptraf:主要作用，可以检查各网络接口的流量状况，
可以以所有数据混总格式显示，该网卡上接受到多少tcp\udp\ip统计：iptraf -d ethx
可以查看含有链接信息的网络通信： iptraf -i ethx,上半部分显示tcp、下半部分显示udp
(第二个感觉有点类似iftop)


top进阶
入门技巧：
在top界面按1可以看到系统所有cpu各自的使用状况
在进程页面，按‘P’（默认）以cpu使用率排序查看进程列表，‘M’以mem使用率来查看进程列表，‘T’以mtime排序

进阶：
1 我想改变进程列表的显示项（比如增加swap使用）或者改变显示项的顺序（真蛋疼的想法）
f 进入增加／删除显示列的界面
o 进入改变显示列顺序的界面，大写相应显示列的字母则该列向左移，反之向右移
2 默认情况下进程列表以cpu占用排序，'M' 'T'可以改变这种排序，但是我想要更大的自主权，自己选择某列为基准，此时可以按'F'or'O'


htop 类似于top,比top更好的是可以上线翻页以查看所有进程，界面较top优化
-d 设置更新时间
-p 只查看对应pid
-u 只查看对应的uername的进程
支持的交互命令：
1 视图选择类： 上下左右箭头、pgup/pgdown/home/end
2 进程排序相关： M-memory  P-CPU T-time
3 进程操作类： 
空格－标注/取消标注进程(便于后续统一操作，比如kill时不会杀死当前高亮行，而是杀死所有标注行进程)
U 取消所有标注
s strace进程的系统调用
l lsof进程的打开文件
t 以树形图显示出进程的父子关系, +/-可用于折叠显示
k kill
u 只显示对应用户的进程信息
K 隐藏系统内核进程
h 隐藏用户太进程
某个数字： 寻找某个进程

mtr 
是一个集合了ping+traceroute功能的网络诊断工具
-r 与-c结合使用，执行-c指定的次数后
-s bytes  带包ping
-n 不解析域名


dstat: 基本上可以这么用 alias dstat='dstat -cdlmnpsy'


总体来说，系统性能就是两个事：

Throughput ，吞吐量。也就是每秒钟可以处理的请求数，任务数。
Latency， 系统延迟。也就是系统在处理一个请求或一个任务时的延迟。
一般来说，一个系统的性能受到这两个条件的约束，缺一不可。比如，我的系统可以顶得住一百万的并发，但是系统的延迟是2分钟以上，那么，这个一百万的负载毫无意义。系统延迟很短，但是吞吐量很低，同样没有意义。所以，一个好的系统的性能测试必然受到这两个条件的同时作用。 有经验的朋友一定知道，这两个东西的一些关系：

Throughput越大，Latency会越差。因为请求量过大，系统太繁忙，所以响应速度自然会低。
Latency越好，能支持的Throughput就会越高。因为Latency短说明处理速度快，于是就可以处理更多的请求。

经过上述的说明，我们知道要测试系统的性能，需要我们收集系统的Throughput和Latency这两个值。


首先，需要定义Latency这个值，比如说，对于网站系统响应时间必需是5秒以内（对于某些实时系统可能需要定义的更短，比如5ms以内，这个更根据不同的业务来定义）
其次，开发性能测试工具，一个工具用来制造高强度的Throughput，另一个工具用来测量Latency。对于第一个工具，你可以参考一下“十个免费的Web压力测试工具”，关于如何测量Latency，你可以在代码中测量，但是这样会影响程序的执行，而且只能测试到程序内部的Latency，真正的Latency是整个系统都算上，包括操作系统和网络的延时，你可以使用Wireshark来抓网络包来测量。这两个工具具体怎么做，这个还请大家自己思考去了。
最后，开始性能测试。你需要不断地提升测试的Throughput，然后观察系统的负载情况，如果系统顶得住，那就观察Latency的值。这样，你就可以找到系统的最大负载，并且你可以知道系统的响应延时是多少。


关于Latency，如果吞吐量很少，这个值估计会非常稳定，当吞吐量越来越大时，系统的Latency会出现非常剧烈的抖动，所以，我们在测量Latency的时候，我们需要注意到Latency的分布，也就是说，有百分之几的在我们允许的范围，有百分之几的超出了，有百分之几的完全不可接受。也许，平均下来的Latency达标了，但是其中仅有50%的达到了我们可接受的范围。那也没有意义。
关于性能测试，我们还需要定义一个时间段。比如：在某个吞吐量上持续15分钟。因为当负载到达的时候，系统会变得不稳定，当过了一两分钟后，系统才会稳定。另外，也有可能是你的系统在这个负载下前几分钟还表现正常，然后就不稳定了，甚至垮了。所以，需要这么一段时间。这个值，我们叫做峰值极限。
性能测试还需要做SoakTest，也就是在某个吞吐量下，系统可以持续跑一周甚至更长。这个值，我们叫做系统的正常运行的负载极限。