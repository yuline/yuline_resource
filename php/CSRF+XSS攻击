xss攻击与csrf攻击
sql注入攻击解决：
筛选 
过滤（转义） addslashes mysql_real_escape_string (单引号、双引号、反斜线)
预编译

	严格意义上来说，CSRF 不能分类为注入攻击，因为 CSRF 的实现途径远远不止 XSS 注入这一条。通过 XSS 来实现 CSRF 易如反掌，但对于设计不佳的网站，一条正常的链接都能造成 CSRF。
	XSS成功确保了same_domain 下且cookie可用，更加有利于csrf
如果没有xss成功，则攻击者的行为可能不能生效，因为不能保证被攻击者保持着相关会话。但是如果xss成功，那么就相当于伪造了same－domain，一定可以保证被攻击者的相关会话有效，所以可以伪造会话内的任何请求，因为这时的攻击就可以随意使用用户的cookie，而且session在服务器端可用。这时，如果在服务器验证端没有对接受的请求进行相关附加验证（比如在提交的客户端没有添加隐藏的伪随机数字验证域，验证码），那么攻击就会奏效。

XSS通常可以分为两大类：一类是存储型XSS，主要出现在让用户输入数据，供其他浏览此页的用户进行查看的地方，包括留言、评论、博客日志和各类表单等。应用程序从数据库中查询数据，在页面中显示出来，攻击者在相关页面输入恶意的脚本数据后，用户浏览此类页面时就可能受到攻击。这个流程简单可以描述为——恶意用户的Html输入web程序->进入数据库->web程序->用户浏览器。另一类是反射型XSS，主要是将脚本加入URL地址的程序参数里，参数进入程序后在页面直接输出脚本内容,用户点击类似的恶意链接就可能受到攻击。
	如何解决xss，就要对用户输入的数据进行检查，过滤用户输入，不允许发布这种含有站内操作 URL 的链接，这可能有些作用，但是可以通过一些短链接服务来绕过这种防御策略。绝对不可以不进行任何操作就把用户输入的原数据再次发布显示到网页上。如果需要显示用户输入的数据，这必须进行html转义。在将用户数据存入数据库时也要进行过滤，可以对html标签进行实例化转义后存储。
	

如何解决这个问题，我们是否可以效仿上文应对XSS的做法呢？过滤用户输入，不允许发布含有站内操作URL的链接。这么做可能会有点用，但阻挡不了CSRF，因为攻击者可以通过QQ或其他网站把这个链接发布上去，为了伪装可能还使用 bit.ly 压缩一下网址，这样点击到这个链接的用户还是一样会中招。所以对待 CSRF ，我们的视角需要和对待XSS有所区别。CSRF并不一定要有站内的输入，因为它并不属于注入攻击，而是请求伪造。被伪造的请求可以是任何来源，而非一定是站内。所以我们唯有一条路可行，就是过滤请求的处理者。所以最基本的就是永远不要使用$_REQUEST处理$_POST,这样可以稍微提高一下攻击的难度，然并卵。
	
比较头痛的是，因为请求可以从任何一方发起，而发起请求的方式多种多样，可以通过 iframe、ajax（这个不能跨域，得先 XSS）、Flash 内部发起请求（总是个大隐患）。由于几乎没有彻底杜绝 CSRF的方式，我们一般的做法是以各种方式提高攻击的门槛，这么一来不同的资源操作区分的非常清楚我们把问题域缩小到了非GET类型的请求上，攻击者已经不可能通过发布链接来伪造请求了。但他们仍可以发布表单或者在其他站点上使用我们肉眼不可见的表单，在后台用 js 操作，伪造请求。
	
接下来我们就可以用比较简单也比较有效的方法来防御CSRF，这个方法就是“请求令牌”。	
有三种实现方法，
1 将令牌存储到cookie中，当用户登录后就可以设置令牌，在需要表单提交的页面使用该cookie值插入一个隐藏域，在表单处理程序中验证该隐藏域的值与cookie数组中的值。
示例：
<?php
　　　　//构造加密的Cookie信息
　　　　$value = “DefenseSCRF”;
　　　　setcookie(”cookie”, $value, time()+3600);
　　?>

在表单里增加Hash值，以认证这确实是用户发送的请求。
<?php
　　　　$hash = md5($_COOKIE['cookie']);
　　?>
　　<form method=”POST” action=”transfer.php”>
　　　　<input type=”text” name=”toBankId”>
　　　　<input type=”text” name=”money”>
　　　　<input type=”hidden” name=”hash” value=”<?=$hash;?>”>
　　　　<input type=”submit” name=”submit” value=”Submit”>
　　</form>

在表单处理程序中进行验证
<?php
　　      if(isset($_POST['check'])) {
     　　      $hash = md5($_COOKIE['cookie']);
          　　 if($_POST['check'] == $hash) {
               　　 doJob();
　　           } else {
　　　　　　　　//...
          　　 }
　　      } else {
　　　　　　//...
　　      }
      ?>
    
这种方法具有一定作用，当时用户的cookie也有可能被窃取，如果网站具有xss漏洞的话。


2 将令牌存储到服务器端的session中：
首先服务器端要以某种策略生成随机字符串，作为令牌（token），保存在Session里。然后在发出请求的页面，把该令牌以隐藏域一类的形式，与其他信息一并发出。在接收请求的页面，把接收到的信息中的令牌与 Session 中的令牌比较，只有一致的时候才处理请求，否则返回 HTTP 403 拒绝请求或者要求用户重新登陆验证身份。

示例：
1).先是令牌生成函数(gen_token())：
<?php
     function gen_token() {
 　　　　//这里我是贪方便，实际上单使用Rand()得出的随机数作为令牌，也是不安全的。
　　　　//这个可以参考我写的Findbugs笔记中的《Random object created and used only once》
          $token = md5(uniqid(rand(), true));
          return $token;
     }
     
2).然后是Session令牌生成函数(gen_stoken())：
<?php
     　　function gen_stoken() {
　　　　　　$pToken = "";
　　　　　　if($_SESSION[STOKEN_NAME]  == $pToken){
　　　　　　　　//没有值，赋新值
　　　　　　　　$_SESSION[STOKEN_NAME] = gen_token();
　　　　　　}    
　　　　　　else{
　　　　　　　　//继续使用旧的值
　　　　　　}
     　　}
     ?>
     
3).WEB表单生成隐藏输入域的函数：
<?php
　　     function gen_input() {
     　　     gen_stoken();
　　          echo “<input type=\”hidden\” name=\”" . FTOKEN_NAME . “\”
          　　     value=\”" . $_SESSION[STOKEN_NAME] . “\”> “;
     　　}
     ?>
     
4).WEB表单结构
<?php
          session_start();
          include(”functions.php”);
     ?>
     <form method=”POST” action=”transfer.php”>
          <input type=”text” name=”toBankId”>
          <input type=”text” name=”money”>
          <? gen_input(); ?>
          <input type=”submit” name=”submit” value=”Submit”>
     </FORM>
     
5).服务端核对令牌

3 不存储令牌值。通过特殊的算法构建令牌值插入到表单的隐藏域中，然后在表单验证程序对该令牌值进行自检，为了防止攻击者分析原页面得到该隐藏域值，所以要针对每个会话设置不一样的令牌，所以可以使用会话session中的值作为构造变量来构造hash值。可以参考<<php核心技术与最佳实践》

除了令牌的方法外，还可以使用图片验证码的方法。

以上的防御方法都要注意以下事项：
1 并行会话的兼容：
也就是不同的表单页面（url）需要区分各自的令牌，每个页面的请求令牌都应该放在独立的Session Key中。如果用户在一个站点上同时打开了两个不同的表单，CSRF保护措施不应该影响到他对任何表单的提交，考虑一下如果每次表单被装入时站点生成一个伪随机值来覆盖以前的伪随机值将会发生什么情况：用户只能成功地提交他最后打开的表单，因为所有其他的表单都含有非法的伪随机值。

2 无论是普通的请求令牌还是验证码，服务器端验证过一定记得销毁并且重新生成！！！


